#my write after watching neetcode youtube video
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        def premutecrusion(nums) :
            if (len(nums) == 1) :
                return [nums.copy()]
            else :
                result = []
                for _ in nums:
                    x = nums.pop(0)
                    temp = premutecrusion(nums)
                    for el in temp:
                        el.append(x)
                    result.extend(temp)
                    nums.append(x)
            return result
        return premutecrusion(nums)


neetcode Solution
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        if (len(nums) == 1) :
            return [nums.copy()]
        else :
            result = []
            for _ in nums:
                x = nums.pop(0)
                temp =self.permute(nums)
                for el in temp:
                    el.append(x)
                result.extend(temp)
                nums.append(x)
        return result


another method
class Solution:
    def permute(self, l: List[int]) -> List[List[int]]:
        def dfs(path, used, res):
            if len(path) == len(l):
                res.append(path[:]) # note [:] make a deep copy since otherwise we'd be append the same list over and over
                return

            for i, letter in enumerate(l):
                # skip used letters
                if used[i]:
                    continue
                # add letter to permutation, mark letter as used
                path.append(letter)
                used[i] = True
                dfs(path, used, res)
                # remove letter from permutation, mark letter as unused
                path.pop()
                used[i] = False
            
        res = []
        dfs([], [False] * len(l), res)
        return res
