class Solution:
    def longestPalindrome(self, s: str) -> str:
        longestp = ''
        for i in range(0, len(s)) :
            l, r = i -1, i + 1
            currentp = s[i]
            while l in range(len(s)) and r in range(len(s)):
                if s[l] == s[r] :
                    currentp = s[l] + currentp + s[r]
                    l -= 1
                    r += 1
                    # print(currentp)
                else:
                    break
            
            if len(currentp) > len(longestp) :
                longestp = currentp

            l, r = i , i + 1
            currentp = ''
            while l in range(len(s)) and r in range(len(s)):
                if s[l] == s[r] :
                    currentp = s[l] + currentp + s[r]
                    l -= 1
                    r += 1
                    # print(currentp)
                else: 
                    break 

            if len(currentp) > len(longestp) :
                longestp = currentp
        return longestp


class Solution:
    def longestPalindrome(self, s: str) -> str:
        # dp =[[0] * len(s)] * len(s) this will cause error as dp will be a list contain multiple element that is reffered to the same list
        dp =[[0]* len(s) for _ in range(len(s))]
        for i in range(len(s)):
            dp[i][i] = 1
        longestP = s[0]
        for i in range(len(s)-1 , -1, -1):
            for j in range(i+1, len(s)):
                if s[i] == s[j]:
                    if j - i == 1 or dp[i+1][j-1] == 1:
                        dp[i][j] = 1
                        if len(s[i:j+1]) > len(longestP) :
                            longestP = s[i:j+1]
        return longestP
