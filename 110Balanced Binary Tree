# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        if root == None :
            return True
        def checkdepth(root):
            if root ==None :
                return 0
            if root.left == None and root.right  == None :
                return 1
            else :
                return max(checkdepth(root.right), checkdepth(root.left)) +1
        
        def checkbalance(root):
            if root.left is None and root.right is None :
                return True
            elif root.left is None :
                if checkdepth(root.right) <= 1 :
                    return True
                else :
                    return False
            elif root.right is None :
                if checkdepth(root.left) <= 1 :
                    return True
                else: 
                    return False
            elif abs(checkdepth(root.left) - checkdepth(root.right)) > 1 :
                return False
            else:
                return  checkbalance(root.left) and checkbalance(root.right)
        return checkbalance(root)


